I/O多路复用
I/O多路复用使得程序可以同时监听多个文件描述符, 能够提高程序的性能, Linux下实现I/O多路复用的系统调用使用select、poll、epoll

select:
    1. 首先构造一个关于文件描述符的列表, 将要监听的文件描述符添加到该列表中
    2. 调用一个系统函数, 监听该列表中的文件描述符, 直到这些文件描述符中的一个或者多个进行I/O操作时, 该函数才返回
        1). 这个函数时阻塞的
        2). 函数对文件描述符检测的操作是由内核完成的
    3. 在返回时, 会告诉进程有多少(哪些)描述符要进行I/O操作
     #include <sys/time.h>
       #include <sys/types.h>
       #include <unistd.h>

       int select(int nfds, fd_set *readfds, fd_set *writefds,
                  fd_set *exceptfds, struct timeval *timeout);
            参数:
                nfds:
                    委托内核检测的最大文件描述符的值 +１
                readfds:
                    要检测的文件描述符的读的集合, 委托内核检测哪些文件描述符的读的属性
                    一般检测读操作
                    对应的是对方发送过来的数据, 因为读是被动地接收数据, 检测的就是读缓冲区
                    是一个传入传出参数
                writefds:
                    要检测的文件描述符的写的集合， 委托内核检测哪些文件描述符的写的属性
                    委托内核检测写缓冲区是不是还可以写数据(不满时可写)
                exceptfds:
                    检测发生异常的文件描述符的集合
                timeout:
                    设置的超时时间
                    struct timeval{
                        long tv_sec;
                        long tv_usec;
                    }
                    NULL:
                        永久阻塞, 直到检测到文件描述符有变化
                    tv_sec = 0, tv_usec = 0:
                        不阻塞
                    tv_sec > 0, tv_usec > 0:
                        阻塞对应的时间
            return:
                失败: -1
                成功: >0 返回n, 检测的集合中有n个文件描述符发生了变化
        void FD_CLR(int fd, fd_set *set);
            将参数文件描述符fd对应的标志位设置为0
        int  FD_ISSET(int fd, fd_set *set);
            判断fd对应的标志位是0还是1, 返回值: fd对应的标志位的值
        void FD_SET(int fd, fd_set *set);
            将参数文件描述符fd对应的标志位设置为1
        void FD_ZERO(fd_set *set);
            fd_set一共有1024 bit, 全部初始化为0
